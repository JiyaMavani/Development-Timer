@using MudBlazor
@inject NavigationManager NavManager
@inject DevelopmentTimer.UI.Services.LocalStorageService LocalStorage

<style>
    .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        width: 20%;
        height: 100vh;
        background-color: #263D42;
        padding: 20px;
        box-sizing: border-box;
    }

    .sidebar-link {
        color: white;
        display: block;
        padding: 12px 15px;
        border-radius: 5px;
        text-decoration: none;
        font-weight: bold;
        font-size: 1.3em;
    }

        .sidebar-link:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }

    .sidebar-title {
        font-size: 30px;
        font-weight: bold;
        color: grey;
        margin-bottom: 20px;
    }
</style>

<MudCard class="sidebar">
    <MudText Typo="Typo.h6" Class="sidebar-title">Developer Menu</MudText>
    <MudDivider Class="mb-4" />
    <MudCardContent>
        <MudNavLink OnClick="@GoToTimeSheets" Class="sidebar-link">TimeSheets</MudNavLink>
        <MudNavLink OnClick="@GoToTimers" Class="sidebar-link">Timers</MudNavLink>
        <MudNavLink Href="/login" Class="sidebar-link" OnClick="@LogoutAsync">Logout</MudNavLink>
    </MudCardContent>
</MudCard>

@code {
    private async Task LogoutAsync()
    {
        try
        {
            await LocalStorage.RemoveItemAsync("authToken");
            await LocalStorage.RemoveItemAsync("DeveloperId");
            var token = await LocalStorage.GetItemAsync("authToken");
            var developerId = await LocalStorage.GetItemAsync("DeveloperId");
            Console.WriteLine($"Post-logout - authToken: {token ?? "null"}, DeveloperId: {developerId ?? "null"}");
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
        }
    }

    private async Task GoToTimeSheets()
    {
        var developerIdString = await LocalStorage.GetItemAsync("DeveloperId");
        if (!string.IsNullOrEmpty(developerIdString) && int.TryParse(developerIdString, out int developerId))
            NavManager.NavigateTo($"/developer/timesheets/{developerId}");
        else
            NavManager.NavigateTo("/login");
    }

    private async Task GoToTimers()
    {
        var developerIdString = await LocalStorage.GetItemAsync("DeveloperId");
        if (!string.IsNullOrEmpty(developerIdString) && int.TryParse(developerIdString, out int developerId))
            NavManager.NavigateTo($"/developer/timers/{developerId}");
        else
            NavManager.NavigateTo("/login");
    }
}