@* @page "/admin/projects"
@layout AdminLayout
@inject HttpClient Http
@inject NavigationManager NavManager
@using MudBlazor
@using DevelopmentTimer.DAL.Entities
@using DevelopmentTimer.DAL.Enums
@using DevelopmentTimer.BAL.DTOs.ProjectDTO

<style>
    .title {
        text-align: center;
        color: black;
    }

    .project-table-container {
        margin-top: 20px;
        border-radius: 10px;
        background-color: #ffffff;
        overflow-x: visible;
        padding: 0;
    }

    .custom-table table {
        width: 100%;
        border-collapse: collapse;
        table-layout: fixed;
    }

    .custom-table .table-header {
        background-color: #c7d59f;
        color: #212121;
        font-weight: bold;
        text-align: center;
        padding: 10px 6px;
        border: 1px solid black;
        word-wrap: break-word;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .custom-table .table-cell {
        text-align: center;
        font-size: 1rem;
        padding: 8px 4px;
        border: 1px solid black;
        word-wrap: break-word;
    }

    .custom-table tbody tr:hover {
        background-color: rgba(25, 118, 210, 0.1);
        cursor: pointer;
    }

    .custom-table tbody tr:nth-of-type(odd) {
        background-color: #f8f9fa;
    }

    .mud-table-pagination {
        justify-content: center;
        margin-top: 10px;
    }


    @@media (max-width: 768px) {
        .custom-table .table-header

    {
        font-size: 1.2rem;
        padding: 6px 3px;
    }

    .custom-table .table-cell {
        font-size: 0.9rem;
        padding: 4px 2px;
    }

    .project-table-container {
        margin-top: 10px;
        padding: 3px;
    }

    }

    @@media (max-width: 480px) {
        .custom-table .table-header

    {
        font-size: 1rem;
        padding: 4px 2px;
    }

    .custom-table .table-cell {
        font-size: 0.8rem;
        padding: 2px 1px;
    }

    .project-table-container {
        margin-top: 5px;
        padding: 2px;
    }

    }
</style>

<MudText Typo="Typo.h2" Class="title mb-4">Projects</MudText>

<MudPaper Elevation="6" Class="p-2 project-table-container">
    @if (projects == null || !projects.Any())
    {
        <MudText Typo="Typo.h6" Class="text-center">
            Loading Projects...
        </MudText>
    }
    else
    {
        <MudTable T="ProjectReadDto" Items="projects" Hover="true" Bordered="true" Striped="true" Class="custom-table">
            <HeaderContent>
                <MudTh Class="table-header" @onclick="@(() => Sort("Name"))">Project Name</MudTh>
                <MudTh Class="table-header" @onclick="@(() => Sort("MaxHoursPerDay"))">Max Hours / Day</MudTh>
                <MudTh Class="table-header" @onclick="@(() => Sort("Status"))">Status</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Class="table-cell">@context.Name</MudTd>
                <MudTd Class="table-cell">@context.MaxHoursPerDay</MudTd>
                <MudTd Class="table-cell">@context.Status</MudTd>
            </RowTemplate>
        </MudTable>
    }

    <MudButton class="btn btn-success mt-3" Variant="Variant.Filled"
               OnClick="@(() => NavManager.NavigateTo("/admin/projects/addprojects"))">
        Add Projects
    </MudButton>
</MudPaper>

@code {
    private List<ProjectReadDto> projects = new List<ProjectReadDto>();
    private string? errorMessage;

    private string? sortedColumn;
    private bool ascending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
        StateHasChanged();
    }

    private async Task LoadProjects()
    {
        errorMessage = null;
        try
        {
            var result = await Http.GetFromJsonAsync<List<ProjectReadDto>>("https://localhost:7152/api/Project");
            if (result != null)
            {
                projects = result.ToList(); 
            }
            else
            {
                projects = new List<ProjectReadDto>();
                errorMessage = "No projects found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading projects: {ex.Message}";
            projects = new List<ProjectReadDto>();
        }
    }

    private void Sort(string column)
    {
        if (sortedColumn == column)
            ascending = !ascending;
        else
        {
            sortedColumn = column;
            ascending = true;
        }

        var sortedProjects = column switch
        {
            "Name" => ascending
                ? projects.OrderBy(p => p.Name).ToList()
                : projects.OrderByDescending(p => p.Name).ToList(),
            "MaxHoursPerDay" => ascending
                ? projects.OrderBy(p => p.MaxHoursPerDay).ToList()
                : projects.OrderByDescending(p => p.MaxHoursPerDay).ToList(),
            "Status" => ascending
                ? projects.OrderBy(p => p.Status).ToList()
                : projects.OrderByDescending(p => p.Status).ToList(),
            _ => projects.ToList()
        };
        projects = sortedProjects; 
        StateHasChanged();
    }
}


 *@



@page "/admin/projects"
@layout AdminLayout
@inject HttpClient Http
@inject NavigationManager NavManager
@using MudBlazor
@using DevelopmentTimer.DAL.Entities
@using DevelopmentTimer.DAL.Enums
@using DevelopmentTimer.BAL.DTOs.ProjectDTO

<style>
    .title {
        text-align: center;
        color: black;
    }

    .project-table-container {
        margin-top: 20px;
        border-radius: 10px;
        background-color: #ffffff;
        overflow-x: visible;
        padding: 0;
    }

    .custom-table table {
        width: 100%;
        border-collapse: collapse;
        table-layout: fixed;
    }

    .custom-table .table-header {
        background-color: #c7d59f;
        color: #212121;
        font-weight: bold;
        text-align: center;
        padding: 10px 6px;
        border: 1px solid black;
        word-wrap: break-word;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .custom-table .table-cell {
        text-align: center;
        font-size: 1rem;
        padding: 8px 4px;
        border: 1px solid black;
        word-wrap: break-word;
    }

    .custom-table tbody tr:hover {
        background-color: rgba(25, 118, 210, 0.1);
        cursor: pointer;
    }

    .custom-table tbody tr:nth-of-type(odd) {
        background-color: #f8f9fa;
    }

    .mud-table-pagination {
        justify-content: center;
        margin-top: 10px;
    }

    .custom-pager {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 15px;
        gap: 5px;
        font-size: 0.9rem;
    }

    .custom-pager .mud-button-root {
        background-color: #1976d2; 
        color: white;
        border-radius: 5px;
        min-width: 35px;
        min-height: 35px;
        transition: background-color 0.3s, transform 0.2s;
    }

    .custom-pager .mud-button-root:hover {
        background-color: #115293; 
        transform: scale(1.05);
    }

    .custom-pager .mud-button-root.mud-disabled {
        background-color: #e0e0e0;
        color: #9e9e9e;
        cursor: not-allowed;
    }

    .custom-pager .mud-select {
        min-width: 60px;
    }

    .custom-pager .mud-button-root.mud-selected {
        background-color: #4caf50; 
        color: white;
        font-weight: bold;
    }

    .custom-pager .mud-button-root.mud-icon-button {
        background-color: #1976d2;
        color: white;
        border-radius: 50%;
        min-width: 35px;
        min-height: 35px;
    }

    .custom-pager .mud-button-root.mud-icon-button:hover {
        background-color: #115293;
        transform: scale(1.1);
    }



    @@media (max-width: 768px) {
        .custom-table .table-header {
            font-size: 1.2rem;
            padding: 6px 3px;
        }

        .custom-table .table-cell {
            font-size: 0.9rem;
            padding: 4px 2px;
        }

        .project-table-container {
            margin-top: 10px;
            padding: 3px;
        }
    }

    @@media (max-width: 480px) {
        .custom-table .table-header {
            font-size: 1rem;
            padding: 4px 2px;
        }

        .custom-table .table-cell {
            font-size: 0.8rem;
            padding: 2px 1px;
        }

        .project-table-container {
            margin-top: 5px;
            padding: 2px;
        }
    }
</style>

<MudText Typo="Typo.h2" Class="title mb-4">Projects</MudText>

<MudPaper Elevation="6" Class="p-2 project-table-container">
    @if (projects == null || !projects.Any())
    {
        <MudText Typo="Typo.h6" Class="text-center">
            Loading Projects...
        </MudText>
    }
    else
    {
        <MudTable T="ProjectReadDto" Items="projects" Hover="true" Bordered="true" Striped="true" Class="custom-table"
                  RowsPerPage="5" PagerContent="@PagerContent">
            <HeaderContent>
                <MudTh Class="table-header" @onclick="@(() => Sort("Name"))">Project Name</MudTh>
                <MudTh Class="table-header" @onclick="@(() => Sort("MaxHoursPerDay"))">Max Hours / Day</MudTh>
                <MudTh Class="table-header" @onclick="@(() => Sort("Status"))">Status</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Class="table-cell">@context.Name</MudTd>
                <MudTd Class="table-cell">@context.MaxHoursPerDay</MudTd>
                <MudTd Class="table-cell">@context.Status</MudTd>
            </RowTemplate>
        </MudTable>
    }

    <MudButton class="btn btn-success mt-3" Variant="Variant.Filled"
               OnClick="@(() => NavManager.NavigateTo("/admin/projects/addprojects"))">
        Add Projects
    </MudButton>
</MudPaper>

@code {
    private List<ProjectReadDto> projects = new List<ProjectReadDto>();
    private string? errorMessage;

    private string? sortedColumn;
    private bool ascending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
        StateHasChanged();
    }

    private async Task LoadProjects()
    {
        errorMessage = null;
        try
        {
            var result = await Http.GetFromJsonAsync<List<ProjectReadDto>>("https://localhost:7152/api/Project");
            if (result != null)
            {
                projects = result.ToList();
            }
            else
            {
                projects = new List<ProjectReadDto>();
                errorMessage = "No projects found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading projects: {ex.Message}";
            projects = new List<ProjectReadDto>();
        }
    }

    private void Sort(string column)
    {
        if (sortedColumn == column)
            ascending = !ascending;
        else
        {
            sortedColumn = column;
            ascending = true;
        }

        var sortedProjects = column switch
        {
            "Name" => ascending
                ? projects.OrderBy(p => p.Name).ToList()
                : projects.OrderByDescending(p => p.Name).ToList(),
            "MaxHoursPerDay" => ascending
                ? projects.OrderBy(p => p.MaxHoursPerDay).ToList()
                : projects.OrderByDescending(p => p.MaxHoursPerDay).ToList(),
            "Status" => ascending
                ? projects.OrderBy(p => p.Status).ToList()
                : projects.OrderByDescending(p => p.Status).ToList(),
            _ => projects.ToList()
        };
        projects = sortedProjects;
        StateHasChanged();
    }
    private RenderFragment PagerContent => __builder =>
    {
        __builder.OpenComponent(0, typeof(MudTablePager));
        __builder.AddAttribute(1, "RowsPerPageOptions", new int[] { 5, 10, 20 });
        __builder.AddAttribute(2, "Class", "custom-pager");
        __builder.CloseComponent();
    };
}




