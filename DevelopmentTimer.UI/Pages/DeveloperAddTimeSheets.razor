@page "/developer/projects/{DeveloperId:int}/addtimesheet/{ProjectId:int}"
@inject NavigationManager NavManager
@inject HttpClient Http
@layout DeveloperSidebar
@using DevelopmentTimer.DAL.Enums
@using MudBlazor
@using DevelopmentTimer.BAL.DTOs.TaskItemDTO

<style>
    .form-container {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        padding-top: 50px;
        min-height: 85vh;
        background: #f5f6fa;
    }

    .form-card {
        padding: 25px;
        width: 360px;
        border-radius: 12px;
        background: white;
        box-shadow: 0px 4px 12px rgba(0,0,0,0.1);
        margin-top: -100px;
        margin-bottom: 10px;
    }

    .form-title {
        margin-bottom: 20px;
        color: #263D42;
        font-weight: 600;
        font-size: 22px;
        text-align: center;
    }

    .form-label {
        font-weight: 500;
        color: #263D42;
        margin-bottom: 5px;
        display: block;
        font-size: 14px;
    }

    .form-input {
        border: 1px solid black;
        border-radius: 6px;
        padding: 6px 10px;
        font-size: 14px;
        width: 100%;
        box-sizing: border-box;
    }

    .custom-select {
        width: 100%;
        padding: 0.5rem;
        border-radius: 4px;
        border: 1px solid #ccc;
        font-size: 1rem;
        background-color: #fff;
        color: #333;
    }

    custom-select option {
        padding: 0.5rem;
    }

    .mud-input-root {
        width: 100%;
    }
</style>

<MudContainer Class="form-container">
    <MudPaper Class="form-card" Elevation="12">
        <MudText Typo="Typo.h6" Class="form-title">Add TimeSheet</MudText>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudText Color="Color.Error">@errorMessage</MudText>
        }

        <EditForm Model="@taskItem" OnValidSubmit="@AddTimeSheet">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudStack Spacing="2">

                <MudText Class="form-label">Title</MudText>
                <MudTextField T="string" @bind-Value="taskItem.Title" Variant="Variant.Outlined" FullWidth="true" Class="form-input"/>

                <MudText Class="form-label">Description</MudText>
                <MudTextField T="string" @bind-Value="taskItem.Description" Variant="Variant.Outlined" FullWidth="true" Class="form-input"/>

                <MudText Class="form-label">Estimated Hours</MudText>
                <MudTextField T="int" @bind-Value="taskItem.EstimatedHours" Variant="Variant.Outlined" FullWidth="true" Class="form-input"/>

                <MudText Class="form-label">Status</MudText>
                <select class="custom-select" @onchange="OnStatusChanged">
                    @foreach (var status in Enum.GetValues<Status>())
                    {
                        <option value="@status" selected="@(taskItem.Status == status)">@status</option>
                    }
                </select>

                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="btn btn-success" FullWidth="true">
                    Add TimeSheet
                </MudButton>

            </MudStack>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public int DeveloperId { get; set; }
    [Parameter] public int ProjectId { get; set; }  

    private TaskItemCreateDto taskItem = new();
    private string? errorMessage;

    protected override void OnParametersSet()
    {
        taskItem.DeveloperId = DeveloperId;
        taskItem.ProjectId = ProjectId; 
        taskItem.Date = DateTime.Now;
        taskItem.TotalHours = taskItem.EstimatedHours;
        taskItem.isApproved = false;
        taskItem.Status = Status.NotStarted;
        taskItem.NotificationThresholdMinutes = new TimeOnly(0, 30);
        taskItem.isReadonly = true;
    }

    private async Task AddTimeSheet()
    {
        errorMessage = null;

        try
        {
            if (string.IsNullOrWhiteSpace(taskItem.Title) ||
                string.IsNullOrWhiteSpace(taskItem.Description) ||
                taskItem.EstimatedHours <= 0)
            {
                errorMessage = "Please fill all required fields correctly.";
                return;
            }

            taskItem.TotalHours = taskItem.EstimatedHours;

            var response = await Http.PostAsJsonAsync("https://localhost:7152/api/TaskItem", taskItem);

            if (response.IsSuccessStatusCode)
            {
                NavManager.NavigateTo($"/developer/projects/{DeveloperId}", true);
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                errorMessage = $"Server returned: {response.StatusCode}\nContent:\n{content}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
        }
    }

    private void OnStatusChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
            taskItem.Status = Enum.Parse<Status>(e.Value.ToString());
    }
}





