@page "/admin/viewtimesheets"
@layout AdminSidebar
@inject HttpClient Http
@inject NavigationManager NavManager
@using MudBlazor
@using DevelopmentTimer.DAL.Entities
@using DevelopmentTimer.DAL.Enums
@using DevelopmentTimer.BAL.DTOs.TaskItemDTO;

<style>
    .title {
        text-align: center;
        color: black;
    }

    .timesheet-table-container {
        margin-top: 20px;
        border-radius: 10px;
        background-color: #ffffff;
        overflow-x: visible; 
        padding: 0;
    }

    .custom-table table {
        width: 100%;
        border-collapse: collapse;
        table-layout: fixed; 
    }

    .custom-table .table-header {
        background-color: #c7d59f;
        color: #212121;
        font-weight: bold;
        text-align: center;
        padding: 10px 6px;
        border: 1px solid black;
        word-wrap: break-word;
        font-size: 1.5rem;
    }

    .custom-table .table-cell {
        text-align: center;
        font-size: 1rem;
        padding: 8px 4px;
        border: 1px solid black;
        word-wrap: break-word;
    }

    .custom-table tbody tr:hover {
        background-color: rgba(25, 118, 210, 0.1);
        cursor: pointer;
    }

    .custom-table tbody tr:nth-of-type(odd) {
        background-color: #f8f9fa;
    }

    .mud-button.btn {
        font-size: 1rem;
        padding: 6px 12px;
    }

    @@media (max-width: 768px) {
        .custom-table .table-header {
            font-size: 1.2rem;
            padding: 6px 3px;
        }

        .custom-table .table-cell {
            font-size: 0.9rem;
            padding: 4px 2px;
        }

        .timesheet-table-container {
            margin-top: 10px;
            padding: 3px;
        }

        .mud-button.btn {
            font-size: 0.9rem;
            padding: 4px 10px;
        }

    }

    @@media (max-width: 480px) {
        .custom-table .table-header {
            font-size: 1rem;
            padding: 4px 2px;
        }

        .custom-table .table-cell {
            font-size: 0.8rem;
            padding: 2px 1px;
        }

        .timesheet-table-container {
            margin-top: 5px;
            padding: 2px;
        }

        .mud-button.btn {
            font-size: 0.7rem;
            padding: 2px 6px;
        }
    }
</style>

<MudText Typo="Typo.h2" Class="title mb-4">TimeSheets</MudText>

<MudPaper Elevation="6" Class="p-2 timesheet-table-container">
    <MudTable T="TaskItemReadDto" Items="@taskItems" Hover="true" Bordered="true" Striped="true" Class="custom-table">
        <HeaderContent>
            <MudTh Class="table-header">Title</MudTh>
            <MudTh Class="table-header">Total Hours</MudTh>
            <MudTh Class="table-header">Status</MudTh>
            <MudTh Class="table-header">Date</MudTh>
            <MudTh Class="table-header">isApproved</MudTh>
            <MudTh Class="table-header">Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="table-cell">@context.Title</MudTd>
            <MudTd Class="table-cell">@context.TotalHours</MudTd>
            <MudTd Class="table-cell">@context.Status</MudTd>
            <MudTd Class="table-cell">@context.Date</MudTd>
            <MudTd Class="table-cell">@context.isApproved</MudTd>
            <MudTd Class="table-cell">
                @if(!context.isApproved){
                <MudButton Class="btn btn-success" Variant="Variant.Filled" OnClick="@(() => ApproveTask(context))">
                    Approve
                </MudButton>}
                else{
                    <MudText Typo="Typo.h5" Align="Align.Center">Approved</MudText>
                }
            </MudTd>
            
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<TaskItemReadDto> taskItems = new List<TaskItemReadDto>();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadTimeSheets();
    }

    private async Task LoadTimeSheets()
    {
        errorMessage = null;
        try
        {
            taskItems = await Http.GetFromJsonAsync<List<TaskItemReadDto>>("https://localhost:7152/api/TaskItem") ?? new List<TaskItemReadDto>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception : {ex.Message}";
        }
    }
    private async Task ApproveTask(TaskItemReadDto taskItemReadDto)
    {
        try
        {
            var response = await Http.PutAsync($"https://localhost:7152/api/TaskItem/{taskItemReadDto.Id}/approve", null);
            if (response.IsSuccessStatusCode)
            {
                await LoadTimeSheets();
            }
            else
            {
                errorMessage = $"Failed to approve: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
        }
    }

}


