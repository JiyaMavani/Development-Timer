@page "/developer/timers/{DeveloperId:int?}"
@layout DeveloperSidebar
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@using MudBlazor
@using DevelopmentTimer.BAL.DTOs.ProjectDTO

<style>
    .project-container {
        max-width: 900px;
        margin: 40px auto;
        padding: 20px;
        border-radius: 12px;
        background-color: #f9f9f9;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .project-heading {
        margin-top: -10px;
    }

    .project-dropdown {
        width: 100%;
        padding: 10px 15px;
        border-radius: 8px;
        border: 1px solid #ccc;
        font-size: 16px;
        background-color: #ffffff;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        transition: border-color 0.2s ease;
    }

        .project-dropdown:focus {
            outline: none;
            border-color: #1976d2;
            box-shadow: 0 0 5px rgba(25, 118, 210, 0.5);
        }
</style>

<MudPaper Class="project-container" Elevation="6">
    <MudText Typo="Typo.h5" Class="project-heading mb-3">Your Projects</MudText>

    @if (developerProjects != null && developerProjects.Any())
    {
        <select class="project-dropdown" @onchange="OnProjectChanged">
            <option value="">Select Project</option>
            @foreach (var project in developerProjects)
            {
                <option value="@project.Id">@project.Name</option>
            }
        </select>
    }
    else
    {
        <MudText Class="Not-Found">No projects available. Please contact the Admin</MudText>
    }
</MudPaper>

@code {
    [Parameter]
    public int? DeveloperId { get; set; }

    private List<ProjectReadDto> developerProjects = new();
    private ProjectReadDto selectedProject;

    protected override async Task OnInitializedAsync()
    {
        // If DeveloperId not in URL, get from localStorage
        if (DeveloperId == null)
        {
            var id = await JS.InvokeAsync<string>("localStorage.getItem", "DeveloperId");
            if (!string.IsNullOrEmpty(id) && int.TryParse(id, out int developerid))
                DeveloperId = developerid;
            else
                NavManager.NavigateTo("/login");
        }

        if (DeveloperId != null)
        {
            developerProjects = await Http.GetFromJsonAsync<List<ProjectReadDto>>(
                $"https://localhost:7152/api/Project/developer/{DeveloperId}");
        }
    }

    private void OnProjectChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
        {
            selectedProject = developerProjects.FirstOrDefault(p => p.Id == id);
            // You can later navigate to Timer Start page or show timer
            // Example:
            // NavManager.NavigateTo($"/developer/timerstart/{DeveloperId}/{selectedProject.Id}");
        }
        else
        {
            selectedProject = null;
        }
    }
}
