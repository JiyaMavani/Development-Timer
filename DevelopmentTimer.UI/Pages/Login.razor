@page "/login"
@using DevelopmentTimer.UI
@inject HttpClient Http
@inject NavigationManager NavManager
@using DevelopmentTimer.BAL.DTOs.UserDTO
@using MudBlazor

<style>
    body{
        height:100%;
        padding: 0;
        margin: 0;
        overflow: hidden;
    }
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh; 
        background-color: #ffffff;
        font-family: Arial, sans-serif;
        padding: 10px; 
        box-sizing: border-box;
    }

    .login-card {
        background-color: #ffffff;
        padding: 40px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
        box-sizing: border-box;
        border: 2px solid #1976d2;
        margin-bottom: 5em;
    }

    .login-title {
        font-size: 28px;
        font-weight: bold;
        color: #1976d2;
        text-align: center;
        margin-bottom: 25px;
    }

    .form-group {
        margin-bottom: 20px;
        width: 100%;
    }

    
    .login-control{
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
        padding: 12px;
    }

    .login-control:hover {
        border-color: #1976d2;
    }
    .login-input {
        display: block;
        font-size: 14px;
        color: #333;
        margin-bottom: 5px;
    }

    .login-btn {
        width: 100%;
        padding: 12px;
        background-color: #1976d2;
        color: #ffffff;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
    }
    .required {
        color: #d32f2f;
    }
    .error-message {
        color: #d32f2f;
        font-size: 14px;
        text-align: left;
        padding-top: 0em;
        margin-top: 0px;
        margin-bottom: 0px;
        display: block;
        word-wrap: break-word;
    }
</style>

<MudContainer class="login-container">
    <MudCard Class="login-card">
        <MudCardContent>
            <MudText Typo="Typo.h2" Class="login-title">Login</MudText>

            <MudForm Class="form-group">
                <MudText Typo="Typo.subtitle1" Class="login-input">Username <span class="required">*</span></MudText>
                <MudTextField T="string" Class="login-control" @bind-Value="username" Variant="Variant.Text"/>
            </MudForm>

            <MudForm Class="form-group">
                <MudText Typo="Typo.subtitle1" Inline="true" Class="login-input">
                    Password<span class="required"> *</span>
                </MudText>
                <MudTextField T="string" InputType="InputType.Password" Class="login-control" @bind-Value="password" Variant="Variant.Filled"/>
            </MudForm>

            <MudForm Class="form-group">
                <MudText Typo="Typo.subtitle1" Class="login-input">Select Role <span class="text-danger">*</span></MudText>
                <select id="role" class="form-control" @bind="role">
                    <option value="">Select Role</option>
                    <option value="Admin">Admin</option>
                    <option value="Developer">Developer</option>
                </select>
            </MudForm>

            <MudButton ButtonType="ButtonType.Submit" Class="login-btn" OnClick="LoginUser">Login</MudButton>
            <MudText Typo="Typo.subtitle2" Color="Color.Error" Align="Align.Center" Class="error-message">
                @errorMessage
            </MudText>

        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private string? username;
    private string? password;
    private string? role;
    private string? errorMessage;

    private async Task LoginUser()
    {
        errorMessage = null;

        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(role))
        {
            errorMessage = "Please fill all fields";
            return;
        }

        var loginDto = new UserLoginRequestDto
        {
            Username = username,
            Password = password,
            Role = role
        };

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7152/api/Login", loginDto);
            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<UserLoginResponseDto>();
                if (user.Role == "Admin")
                    NavManager.NavigateTo("/admin/dashboard");
                else if (user.Role == "Developer")
                    NavManager.NavigateTo("/developer/dashboard");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                errorMessage = "Invalid username or password";
            }
            else
            {
                errorMessage = "Something went wrong.. Please try again later!";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
        }
    }
}




