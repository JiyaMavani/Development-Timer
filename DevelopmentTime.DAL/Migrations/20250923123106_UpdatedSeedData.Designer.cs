// <auto-generated />
using System;
using DevelopmentTimer.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevelopmentTimer.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250923123106_UpdatedSeedData")]
    partial class UpdatedSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DevelopmentTimer.DAL.Entities.ExtensionsRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<int>("ExtraHours")
                        .HasColumnType("int");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("TaskItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("TaskItemId");

                    b.ToTable("ExtensionRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeveloperId = 2,
                            ExtraHours = 2,
                            Justification = "To create responsive design",
                            TaskItemId = 1
                        },
                        new
                        {
                            Id = 2,
                            DeveloperId = 3,
                            ExtraHours = 3,
                            Justification = "To create responsive design",
                            TaskItemId = 3
                        });
                });

            modelBuilder.Entity("DevelopmentTimer.DAL.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxHoursPerDay")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxHoursPerDay = 7,
                            Name = "Project1",
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = 2,
                            MaxHoursPerDay = 6,
                            Name = "Project2",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = 3,
                            MaxHoursPerDay = 8,
                            Name = "Project3",
                            Status = "OnHold"
                        });
                });

            modelBuilder.Entity("DevelopmentTimer.DAL.Entities.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedHours")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("NotificationThresholdMinutes")
                        .HasColumnType("time");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TotalHours")
                        .HasColumnType("int");

                    b.Property<bool>("isApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("isReadonly")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("ProjectId");

                    b.ToTable("TaskItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2025, 9, 19),
                            Description = "This is the login page creation task with detailed description",
                            DeveloperId = 2,
                            EstimatedHours = 2,
                            NotificationThresholdMinutes = new TimeOnly(0, 10, 0),
                            ProjectId = 1,
                            Status = "InProgress",
                            Title = "Login Page",
                            TotalHours = 2,
                            isApproved = false,
                            isReadonly = true
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2025, 9, 18),
                            Description = "Develop the register page including email verification, password rules validation, and linking it with the database for new users.",
                            DeveloperId = 2,
                            EstimatedHours = 3,
                            NotificationThresholdMinutes = new TimeOnly(0, 45, 0),
                            ProjectId = 1,
                            Status = "Completed",
                            Title = "Register Page",
                            TotalHours = 3,
                            isApproved = true,
                            isReadonly = true
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(2025, 9, 20),
                            Description = "Implement dashboard UI to display project status, active tasks, and progress reports using charts and grids for better user insights.",
                            DeveloperId = 3,
                            EstimatedHours = 3,
                            NotificationThresholdMinutes = new TimeOnly(0, 30, 0),
                            ProjectId = 2,
                            Status = "Pending",
                            Title = "Dashboard",
                            TotalHours = 3,
                            isApproved = false,
                            isReadonly = true
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateOnly(2025, 9, 21),
                            Description = "Design and build profile page where users can update details, change password, and manage their personal settings securely.",
                            DeveloperId = 3,
                            EstimatedHours = 4,
                            NotificationThresholdMinutes = new TimeOnly(0, 15, 0),
                            ProjectId = 2,
                            Status = "InProgress",
                            Title = "Profile Page",
                            TotalHours = 4,
                            isApproved = false,
                            isReadonly = true
                        });
                });

            modelBuilder.Entity("DevelopmentTimer.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedProjectIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedProjectIds = "0",
                            Password = "Admin@1234",
                            Role = "Admin",
                            Username = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AssignedProjectIds = "1",
                            Password = "Sita@1234",
                            Role = "Developer",
                            Username = "Sita"
                        },
                        new
                        {
                            Id = 3,
                            AssignedProjectIds = "2,3",
                            Password = "Rita@5678",
                            Role = "Developer",
                            Username = "Rita"
                        });
                });

            modelBuilder.Entity("DevelopmentTimer.DAL.Entities.ExtensionsRequest", b =>
                {
                    b.HasOne("DevelopmentTimer.DAL.Entities.User", "Developer")
                        .WithMany("ExtensionRequests")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DevelopmentTimer.DAL.Entities.TaskItem", "TaskItem")
                        .WithMany("ExtensionRequests")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("DevelopmentTimer.DAL.Entities.TaskItem", b =>
                {
                    b.HasOne("DevelopmentTimer.DAL.Entities.User", "Developer")
                        .WithMany("Tasks")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DevelopmentTimer.DAL.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DevelopmentTimer.DAL.Entities.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("DevelopmentTimer.DAL.Entities.TaskItem", b =>
                {
                    b.Navigation("ExtensionRequests");
                });

            modelBuilder.Entity("DevelopmentTimer.DAL.Entities.User", b =>
                {
                    b.Navigation("ExtensionRequests");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
